# This SLAMD script simulates the Mindcraft Login Scenario
# http://www.mindcraft.com/whitepapers/ctv5/index.html#Login
#
# The Login Scenario simulates the type of load commonly seen at Web portals 
# where users access protected resources. The Login Scenario assumes that 10% of
# a portal's user population logs in concurrently to use protected resources. 
# Mindcraft Login tests are done using both a 1,000,000-user and a 10,000,000-user 
# directory with 100,000 and 1,000,000 users logging in, respectively. 
#
# The Login Scenario measures the combination of one user authentication and 
# one authorization for access to a resource (called a Login).
#
# It is not possible architecturally in IS to directly simulate the Login test,
# as IS does centralized credential extraction, rather than decentralized at the 
# agents.   In this test, we simply do a 0 page login and 1 authorization
#
# Valid Parameters:
# authenticationUrl=URL of the Identity Server Login Services
# authorizationUrl=URL[1:100]; of the protected resource
# iterations=100000 - number of iterations to perform  REMEMBER to divide by (clients * threads)!
# uid=UID, where UID could be sequential(user[1:10000000]), or random (user[1-1000000])
# password=password where password is a static value (or you could modify the script)



# Make the HTTP data types available for use.
use com.sun.slamd.scripting.http.HTTPClientVariable;
use com.sun.slamd.scripting.http.HTTPRequestVariable;
use com.sun.slamd.scripting.http.HTTPResponseVariable;


# Define the variables we will use.
variable string         authenticationUrl;
variable ValuePattern   authorizationUrl;
variable int            iterations;
variable int            iterationCounter;
variable ValuePattern   uid;
variable string         password;
variable int            statusCode;
variable HTTPClient     httpClient;
variable HTTPRequest    request;
variable HTTPResponse    response;
variable IncrementalTracker loginAttempts;
variable CategoricalTracker  loginResults;
variable TimeTracker        loginTimer;


# Initialize the stat trackers.
loginAttempts.setDisplayName("Mindcraft Login Transactions");
loginResults.setDisplayName("Authorization Results");
loginTimer.setDisplayName("Transaction Time (ms)");
httpClient.setFollowRedirects(true);
    

# Specify the host, port, uid, and password.
authenticationUrl.assign(script.getScriptArgument("authenticationUrl", "http://ips-perf1.red.iplanet.com:58080/amserver/UI/Login"));
authorizationUrl.assign(script.getScriptArgument("authorizationUrl", "http://ips-perf1.red.iplanet.com:58080/index[1:100].html"));
iterations.assign(script.getScriptIntArgument("iterations", 100));
uid.assign(script.getScriptArgument("uid", "user[1-100]"));
password.assign(script.getScriptArgument("password", "password"));
httpClient.setBlindTrust(true);

# Start the stat trackers.
loginAttempts.startTracker();
loginResults.startTracker();
loginTimer.startTracker();


# Run the up to number of iterations.   

iterationCounter = 0;
while  iterationCounter.lessThan(iterations)
begin

    if script.shouldStop()
        break;

    request.assign("POST", authenticationUrl);
    request.addParameter("Login.Token1",uid.nextValue());
    request.addParameter("Login.Token2",password);
    request.addParameter("goto",authorizationUrl.nextValue());
    request.setHeader("Content-Type", "application/x-www-form-urlencoded");          
    loginAttempts.increment();            
    loginTimer.startTimer();
    response = httpClient.sendRequest( request );
    loginTimer.stopTimer();
    httpClient.clearCookies();
    statusCode.assign(response.getStatusCode());
    loginResults.increment(statusCode.toString());

    iterationCounter.increment();
    
end;


# Stop the stat trackers.
loginAttempts.stopTracker();
loginResults.stopTracker();
loginTimer.stopTracker();


