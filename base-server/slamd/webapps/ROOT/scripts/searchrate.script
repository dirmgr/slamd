# This SLAMD script establishes a connection to an LDAP directory server and
# performs a search operation.


# Make the LDAP data types available for use.
use com.sun.slamd.scripting.ldap.LDAPAttributeVariable;
use com.sun.slamd.scripting.ldap.LDAPConnectionVariable;
use com.sun.slamd.scripting.ldap.LDAPEntryVariable;
use com.sun.slamd.scripting.ldap.LDAPModificationVariable;
use com.sun.slamd.scripting.ldap.LDAPModificationSetVariable;


# Define the variables we will use.
variable string         argument;
variable string         host;
variable int            port;
variable string         bindDN;
variable string         bindPW;
variable string         searchBase;
variable int            searchScope;
variable string         searchFilter;
variable LDAPConnection conn;
variable LDAPEntry      entry;
variable int            resultCode;
variable string         message;


# Speicfy the host, port, DN, and password.
host.assign(script.getScriptArgument("host", "127.0.0.1"));
port.assign(script.getScriptIntArgument("port", 389));
bindDN.assign(script.getScriptArgument("binddn", ""));
bindPW.assign(script.getScriptArgument("bindpw", ""));
searchBase.assign(script.getScriptArgument("base", ""));
searchScope.assign(script.getScriptIntArgument("scope", conn.scopeBase()));
searchFilter.assign(script.getScriptArgument("filter", "(objectclass=*)"));


# Enable the stat trackers for the LDAP operations.
#conn.enableAttemptedOperationCounters();
conn.enableSuccessfulOperationCounters();
#conn.enableFailedOperationCounters();
#conn.enableOperationTimers();


# Establish the connection to the directory server.
resultCode.assign(conn.connect(host, port, bindDN, bindPW));


# See if the connection was successful.
if resultCode.notEqual(conn.success())
begin
  message.assign("Unable to connect.  Result code was:  ");
  message.assign(message.append(resultCode.toString()));
  script.logMessage(message);
  script.exitWithError();
end;


# Loop forever.  This will be automatically stopped when the stop time has
# arrived or the job has been run for the maximum allowed duration.
while script.shouldNotStop()
begin
  # Try to perform a search.
  resultCode.assign(conn.search(searchBase, searchScope, searchFilter));


  # See if the search was successful.
  if resultCode.notEqual(conn.success())
  begin
    message.assign("Unable to search.  Result code was:  ");
    message.assign(message.append(resultCode.toString()));
    script.logMessage(message);
    conn.disconnect();
    script.exitWithError();
  end;


  # Iterate through the search results.
  entry.assign(conn.nextEntry());
  while entry.notNull()
  begin
    entry.assign(conn.nextEntry());
  end;
end;


# Close the connection to the server.
conn.disconnect();

