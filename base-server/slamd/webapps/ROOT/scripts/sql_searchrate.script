# This SLAMD script can be used to repeatedly search an relational database
# using JDBC.  The query issued will be based on the prepared statement:
#
#      SELECT * FROM testTable WHERE employeeID = ?;
#
# where the '?' will be replaced with a randomly chosen integer value within a
# range based on the number specified number of rows.
#
# Many of the settings should be specified as script arguments.  The script
# arguments that may be used are:
#
# dbdriver    -- The fully-qualified name of the JDBC driver to use to connect
#                to the database.
# dburl       -- The JDBC URL to use to connect to the database.
# dbuser      -- The username to use to connect to the database.
# dbpassword  -- The password to use to connect to the database.
# numrows     -- The number of rows present in the database.


# Make the JDBC data types available for use.
use com.sun.slamd.scripting.jdbc.JDBCConnectionVariable;
use com.sun.slamd.scripting.jdbc.JDBCPreparedStatementVariable;
use com.sun.slamd.scripting.jdbc.JDBCResultSetVariable;


# Define the variables that we will use.
variable int                   matchingRows;
variable int                   numRows;
variable IncrementalTracker    queriesPerformed;
variable TimeTracker           queryTimer;
variable JDBCConnection        db;
variable JDBCPreparedStatement statement;
variable JDBCResultSet         resultSet;
variable string                dbDriver;
variable string                dbURL;
variable string                dbUser;
variable string                dbPassword;
variable string                errorMessage;
variable string                failureReason;
variable string                sql;


# Assign values to all the variables that can be set as arguments.
dbDriver   = script.getScriptArgument("dbdriver");
dbURL      = script.getScriptArgument("dburl");
dbUser     = script.getScriptArgument("dbuser");
dbPassword = script.getScriptArgument("dbpassword");
numRows    = script.getScriptIntArgument("numrows", 1000);


# Initialize the stat trackers.
queriesPerformed.setDisplayName("Queries Performed");
queryTimer.setDisplayName("Query Duration (ms)");


# Try to load the database driver.
if dbDriver.isNull()
begin
  script.logMessage("No DB driver class specified.");
  script.exitWithError();
end;

ifnot db.setDriverClass(dbDriver)
begin
  errorMessage = "Unable to load DB driver ";
  errorMessage = errorMessage.append(dbDriver);
  errorMessage = errorMessage.append(":  ");
  errorMessage = errorMessage.append(db.getFailureReason());
  script.logMessage(errorMessage);
  script.exitWithError();
end;
else begin
  script.debugMessage("Successfully loaded DB driver");
end;


# Try to connect to the database.
if dbURL.isNull()
begin
  script.logMessage("No JDBC URL specified to use to connect to the DB");
  script.exitWithError();
end;

ifnot db.connect(dbURL, dbUser, dbPassword)
begin
  errorMessage = "Unable to connect to the DB ";
  errorMessage = errorMessage.append(dbURL);
  errorMessage = errorMessage.append(":  ");
  errorMessage = errorMessage.append(db.getFailureReason());
  script.logMessage(errorMessage);
  script.exitWithError();
end;
else begin
  script.debugMessage("Successfully connected to the DB");
end;


# Create the prepared statement that we will use to perform the queries.
sql = "SELECT * FROM testTable where employeeID = ?;";
statement = db.prepareStatement(sql);
if statement.isNull()
begin
  errorMessage = "Unable to create prepared statement ";
  errorMessage = errorMessage.append(sql);
  errorMessage = errorMessage.append(":  ");
  errorMessage = errorMessage.append(failureReason);
  script.logMessage(errorMessage);
  db.disconnect();
  script.exitWithError();
end;
else begin
  script.debugMessage("Successfully created the prepared statement");
end;


# Start the stat trackers.
queriesPerformed.startTracker();
queryTimer.startTracker();


# Create a loop that will try to add the appropriate number of users.
whilenot script.shouldStop()
begin
  queryTimer.startTimer();

  statement.setInteger(1, script.randomInt(1, numRows));
  resultSet = statement.executeQuery();
  
  if resultSet.isNull()
  begin
    errorMessage = "Unable to execute query:  ";
    errorMessage = errorMessage.append(statement.getFailureReason());
    script.logMessage(errorMessage);
    db.disconnect();
    script.exitWithError();
  end;

  matchingRows = 0;  
  while resultSet.nextRow()
  begin
    matchingRows.increment();
  end;
  
  queryTimer.stopTimer();
  queriesPerformed.increment();
  
  if matchingRows.equals(0)
  begin
    script.debugMessage("Query did not match any rows");
  end;
  else if matchingRows.equals(1)
  begin
    script.debugMessage("Query matched 1 row");
  end;
  else begin
    errorMessage = "Query matched ";
    errorMessage = errorMessage.append(matchingRows.toString());
    errorMessage = errorMessage.append(" rows");
    script.debugMessage(errorMessage);
  end;
end;


# Stop the stat trackers.
queriesPerformed.stopTracker();
queryTimer.stopTracker();


# Disconnect from the database.
db.disconnect();
script.debugMessage("All processing complete.");
script.exit();

